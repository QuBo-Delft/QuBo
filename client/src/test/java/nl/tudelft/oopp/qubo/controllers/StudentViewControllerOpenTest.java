package nl.tudelft.oopp.qubo.controllers;

import javafx.fxml.FXMLLoader;
import javafx.geometry.VerticalDirection;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.RadioButton;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import nl.tudelft.oopp.qubo.controllers.helpers.QuBoInformation;
import nl.tudelft.oopp.qubo.dtos.questionboard.QuestionBoardDetailsDto;
import nl.tudelft.oopp.qubo.sceneloader.SceneLoader;
import org.junit.jupiter.api.Test;
import org.testfx.api.FxAssert;
import org.testfx.api.FxRobot;
import org.testfx.framework.junit5.Start;
import org.testfx.matcher.base.NodeMatchers;
import org.testfx.matcher.base.WindowMatchers;
import org.testfx.matcher.control.LabeledMatchers;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;


public class StudentViewControllerOpenTest extends TestFxBase {

    /*
        Create an open Question Board which is loaded in @Start.
     */
    QuestionBoardDetailsDto qdOpen;
    StudentViewController stuVie;

    /**
     * Initiate testing done through the TestFX library.
     *
     * @param stage Test stage created by the TestFX library.
     */
    @Start
    void start(Stage stage) throws IOException {
        qdOpen = createOpenQuBo();
        FXMLLoader loader = new FXMLLoader(SceneLoader.class.getResource("/fxmlsheets/StudentView.fxml"));
        Parent root = loader.load();
        stage.setScene(new Scene(root));
        stage.setTitle("QuBo");
        stage.show();

        stuVie = loader.getController();

        stuVie.setQuBo(qdOpen);
        stuVie.setAuthorName("QuBo");
        stuVie.setBoardDetails();
        stuVie.refresh();
    }

    /**
     * Test whether a GetTextDialog appears and asking works when clicking the ask a question button.
     *
     * @param robot TestFX robot.
     */
    @Test
    void askQuestion(FxRobot robot) {
        robot.clickOn("#askBtn");
        // Expect a GetTextDialog to appear and take focus
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isNotFocused());
        robot.clickOn("#inputfield");
        robot.write("Am I a helpful robot?");
        robot.clickOn("#submitbutton");
        // Expect that the question Vbox now has at least one question item in it
        FxAssert.verifyThat(robot.lookup("#unAnsQuVbox"), NodeMatchers.hasChild("#question"));
        // We expect users to be able to ask multiple questions, therefore we go through the process twice
        robot.clickOn("#askBtn");
        // Expect a GetTextDialog to appear and take focus
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isNotFocused());
        robot.clickOn("#inputfield");
        robot.write("I sure am I hope...? [!@#$%^&*()]|~`'';");
        robot.clickOn("#submitbutton");
        // Expect that the question Vbox now has precisely two question items in it
        FxAssert.verifyThat(robot.lookup("#unAnsQuVbox"), NodeMatchers.hasChildren(2, "#question"));
    }

    /**
     * Test whether the Question Board Details pane gets shown.
     *
     * @param robot TestFX robot.
     */
    @Test
    void checkBoardInfo(FxRobot robot) {
        robot.clickOn("#boardInfo");
        // Expect the Question Board Details pane to be shown.
        FxAssert.verifyThat(robot.window("(Details)"), WindowMatchers.isShowing());
    }

    /**
     * Test whether the quick copy context menu works for the board details button.
     *
     * @param robot TestFX robot.
     */
    @Test
    void checkBoardInfoContext(FxRobot robot) {
        robot.rightClickOn("#boardInfo");
        robot.clickOn("#studentCodeItemBtn");
        // Expect the student code to be copied to the clipboard
        clipboardTest();
        // Expect the boardTitle label to contain text equal to the actual board title
        FxAssert.verifyThat("#boardTitle", LabeledMatchers.hasText(qdOpen.getTitle()));
    }

    /**
     * Test whether clicking the board details button twice closes the pane.
     *
     * @param robot TestFX robot.
     */
    @Test
    void closeBoardInfo(FxRobot robot) {
        robot.clickOn("#boardInfo");
        robot.clickOn("#boardInfo");
        // Expect the regular Student View stage to be focused and therefore the Details pane not showing
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isFocused());
    }

    /**
     * Click the help doc button.
     *
     * @param robot TestFX robot.
     */
    @Test
    void checkHelpDoc(FxRobot robot) {
        robot.clickOn("#helpDoc");
        // Expect the help documentation to be opened and the student view to be therefore unfocused.
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isNotFocused());
        robot.scroll(100, VerticalDirection.DOWN);
        robot.clickOn("#returnButton");
        // Expect the help documentation to be closed and the student view to be therefore focused.
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isFocused());

    }

    /**
     * Click the hamburger to open the sidebar.
     *
     * @param robot TestFX robot.
     */
    @Test
    void openSidebar(FxRobot robot) {
        robot.clickOn("#hamburger");
        // Expect the sidebar to be open
        FxAssert.verifyThat("#sideBar", NodeMatchers.isVisible());
    }

    /**
     * Click the hamburger twice to open and close the sidebar.
     *
     * @param robot TestFX robot.
     */
    @Test
    void closeSidebar(FxRobot robot) {
        robot.clickOn("#hamburger");
        // Expect the sidemenu to be closed
        FxAssert.verifyThat("#sideMenu", NodeMatchers.isInvisible());
    }

    /**
     * Test whether the answered question pane gets shown when it's icon is pressed in the sidebar.
     *
     * @param robot TestFX robot.
     */
    @Test
    void openAnsQuestionsPane(FxRobot robot) {
        robot.clickOn("#hamburger");
        robot.clickOn("#ansQuestions");
        // Expect the side menu item for answered questions to be shown
        FxAssert.verifyThat(robot.lookup("#ansQuVbox"), NodeMatchers.isVisible());
        robot.clickOn("#hamburger");
        // Expect the side menu item for answered questions to be hidden
        FxAssert.verifyThat("#sideMenu", NodeMatchers.isInvisible());
    }

    /**
     * Test whether the polling pane gets shown when it's icon is pressed in the sidebar.
     *
     * @param robot TestFX robot.
     */
    @Test
    void openPollsPane(FxRobot robot) {
        robot.clickOn("#hamburger");
        robot.clickOn("#polls");
        // Expect the side menu item for polling to be shown
        FxAssert.verifyThat("#pollVbox", NodeMatchers.isVisible());
        robot.clickOn("#hamburger");
        // Expect the side menu item for polling to be hidden
        FxAssert.verifyThat("#sideMenu", NodeMatchers.isInvisible());
    }

    /**
     * Test whether the displayed board title equals the actual board title.
     */
    @Test
    void verifyBoardTitle() {
        // Expect the boardTitle label to contain text equal to the actual board title
        FxAssert.verifyThat("#boardTitle", LabeledMatchers.hasText(qdOpen.getTitle()));
    }

    /**
     * Test whether the quick copy context menu works for the board title.
     *
     * @param robot TestFX robot.
     */
    @Test
    void verifyBoardTitle(FxRobot robot) {
        robot.rightClickOn("#boardTitle");
        robot.clickOn("#studentCodeItem");
        // Expect the student code to be copied to the clipboard
        clipboardTest();
        // Expect the boardTitle label to contain text equal to the actual board title
        FxAssert.verifyThat("#boardTitle", LabeledMatchers.hasText(qdOpen.getTitle()));
    }

    /**
     * Test whether the proper open icon is shown for an open question board.
     *
     * @param robot TestFX robot.
     */
    @Test
    void verifyBoardStatusIconOpen(FxRobot robot) {
        ImageView view = robot.lookup("#boardStatusIcon").queryAs(ImageView.class);
        // Expect the icon to be the open variant, meaning that the image URL should end with status_open.png
        assertTrue(view.getImage().getUrl().endsWith("status_open.png"));
    }

    /**
     * Test whether the boardStatusText label shows the correct status message.
     */
    @Test
    void verifyBoardStatusText() {
        // Expect that the board status text equals the expect text from the QuBoInformation class
        FxAssert.verifyThat("#boardStatusText",
            LabeledMatchers.hasText(QuBoInformation.getTimeText(qdOpen)));
    }

    /**
     * Test whether the leave button shows the actual leave confirmation dialog.
     *
     * @param robot TestFX robot.
     */
    @Test
    void clickLeaveButton(FxRobot robot) {
        robot.clickOn("#hamburger");
        robot.clickOn("#leaveQuBo");
        // Expect the student view to be out of focus due to the new dialog
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isNotFocused());
        robot.clickOn("#noBtn");
        // Expect the student view to be in focus again as clicking no should close the dialog and return
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isFocused());
        robot.clickOn("#leaveQuBo");
        robot.clickOn("#yesBtn");
        // Expect the student view stage to be closed and the JoinQuBo.fxml to be shown
        FxAssert.verifyThat(robot.window("(QuBo)"), WindowMatchers.isShowing());
    }

    /**
     * Test whether the pace vote too slow button works as intended.
     *
     * @param robot TestFX robot.
     */
    @Test
    void clickPaceSlow(FxRobot robot) {
        robot.clickOn("#tooSlow");
        RadioButton toggle = robot.lookup("#tooSlow").queryAs(RadioButton.class);
        // Expect that the radio button for pace too slow is now selected
        assertTrue(toggle.isSelected());
        // Expect that the radio button for pace too slow is part of the pace vote toggle group
        // and expect that this is also the only selected one
        assertEquals(toggle, toggle.getToggleGroup().getSelectedToggle());
    }

    /**
     * Test whether the pace vote just right button works as intended.
     *
     * @param robot TestFX robot.
     */
    @Test
    void clickPaceRight(FxRobot robot) {
        robot.clickOn("#justRight");
        RadioButton toggle = robot.lookup("#justRight").queryAs(RadioButton.class);
        // Expect that the radio button for pace just right is now selected
        assertTrue(toggle.isSelected());
        // Expect that the radio button for pace just right is part of the pace vote toggle group
        // and expect that this is also the only selected one
        assertEquals(toggle, toggle.getToggleGroup().getSelectedToggle());
    }

    /**
     * Test whether the pace vote too fast button works as intended.
     *
     * @param robot TestFX robot.
     */
    @Test
    void clickPaceFast(FxRobot robot) {
        robot.clickOn("#tooFast");
        RadioButton toggle = robot.lookup("#tooFast").queryAs(RadioButton.class);
        // Expect that the radio button for pace too fast is now selected
        assertTrue(toggle.isSelected());
        // Expect that the radio button for pace too fast is part of the pace vote toggle group
        // and expect that this is also the only selected one
        assertEquals(toggle, toggle.getToggleGroup().getSelectedToggle());
    }

    /**
     * Test whether pressing a pace vote twice will keep it selected.
     *
     * @param robot TestFX robot.
     */
    @Test
    void clickPaceTwice(FxRobot robot) {
        robot.clickOn("#tooFast");
        robot.clickOn("#tooFast");
        RadioButton toggle = robot.lookup("#tooFast").queryAs(RadioButton.class);
        // Expect that the radio button for pace too fast is now selected
        assertTrue(toggle.isSelected());
        // Expect that the radio button for pace too fast is part of the pace vote toggle group
        // and expect that this is also the only selected one
        assertEquals(toggle, toggle.getToggleGroup().getSelectedToggle());
    }

    /**
     * Test whether updating a pace vote works as intended.
     *
     * @param robot TestFX robot.
     */
    @Test
    void clickTwoPaceVotes(FxRobot robot) {
        robot.clickOn("#tooFast");
        RadioButton toggleFast = robot.lookup("#tooFast").queryAs(RadioButton.class);
        // Expect that the radio button for pace too fast is now selected
        assertTrue(toggleFast.isSelected());
        // Expect that the radio button for pace too fast is part of the pace vote toggle group
        // and expect that this is also the only selected one
        assertEquals(toggleFast, toggleFast.getToggleGroup().getSelectedToggle());
        robot.clickOn("#tooSlow");
        RadioButton toggleSlow = robot.lookup("#tooSlow").queryAs(RadioButton.class);
        // Expect that the radio button for pace too slow is now selected
        assertTrue(toggleSlow.isSelected());
        // Expect that the radio button for pace too fast is now no longer selected
        assertFalse(toggleFast.isSelected());
        // Expect that the radio button for pace too slow is part of the pace vote toggle group
        // and expect that this is now also the only selected one
        assertEquals(toggleSlow, toggleSlow.getToggleGroup().getSelectedToggle());
        // Expect that the radio button for pace too fast is part of the pace vote toggle group
        // and expect that this is no longer the selected one
        assertNotEquals(toggleFast, toggleFast.getToggleGroup().getSelectedToggle());
    }
}
